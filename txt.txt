MARS 4.5  Copyright 2003-2014 Pete Sanderson and Kenneth Vollmar

--------  TOKENIZING BEGINS  -----------
source line ---># Tarea03<---
source line ---># Estudiante: Junior Ruiz Sánchez<---
source line ---># Carné: B97026<---
source line --->#<---
source line --->.data <---
source line --->msj_prueba: .asciiz "El programa está corriendo \n"<---
source line --->.text<---
source line --->main:<---
source line --->li $a1, 5<---
source line --->jal FAREY_SUC<---
source line --->li $v0, 10<---
source line --->syscall<---
source line --->#<---
source line ---># FUNCIONES<---
source line --->#<---
source line --->FAREY_SUC:<---
source line --->addi $sp, $sp, -8        # <-- Apartando espacio en pila para guardar<---
source line --->                         #     dos ceros al final de la lista.<---
source line --->                         # Esto servirá para detener algún escaneo<---
source line --->mul $t9, $a1, $a1        # <-- Creando valor para reservar espacio en pila<---
source line --->sll $t9, $t9, 2          #     que es el cuadrado de n multiplicado por 4<---
source line --->sub $sp, $sp, $t9        # <-- Apartando espacio en pila para numeradores<---
source line --->sub $sp, $sp, $t9        # <-- Apartando espacio en pila para denominadores<---
source line --->add $t0, $0, $sp         # <-- Variable temporal control pila numerador<---
source line --->addi $t8, $0, 1          # <-- Creando variable de aumento para numeradores<---
source line --->addi $t6, $a1, 1         # <-- aumentando valor de parametro<---
source line --->                         #     para ser usado en ciclo for <---
source line --->                         #     y pasando a variable temporal<---
source line --->                         #     ya que se usará otra función que usa a1<---
source line --->addi $t2, $0, 1          # Anticipando valores 1/1 para control<---
source line --->sw $t2, 0($sp)           # de numeros repetidos<---
source line --->sw $t2, 4($sp)           # ya que se debe tener un valor inicial para comparar<---
source line --->sw $0,  8($sp)           # y agregando 0/0 después de 1/1 <---
source line --->sw $0,  12($sp)          # ya que se debe tener un valor final para detener<---
source line --->FOR_NUMERADORES:<---
source line --->addi $t7, $0, 1          # <-- Creando variable de aumento para denominadores<---
source line --->    FOR_DENOMINADORES:<---
source line --->                                       # No agregando valores mayores a 1<---
source line --->    slt $t1, $t7, $t8                  # <-- si dem < num  t1 = 1<---
source line --->    bne $t1, $0, DEN_MAS_1    # <-- siguiente elemento si t1 no es 0<---
source line --->                                    # Simplificando<---
source line --->    add $a2, $0, $t8                # <-- Preparando valores para función MCD<---
source line --->    add $a1, $0, $t7 <---
source line --->    add $t2, $0, $ra                    # <-- Guardando $ra en temporal <---
source line --->    jal MCD                             # <-- Llamado a función<---
source line --->    add $ra, $0, $t2                    # <-- restaurando $ra<---
source line --->    <---
source line --->    div $t8, $v0<---
source line --->    mflo $t5<---
source line --->    div $t7, $v0<---
source line --->    mflo $t4<---
source line --->    <---
source line --->    add $t2, $0, $sp<---
source line --->    while:<---
source line --->    lw $a2, 0($t2)<---
source line --->    lw $a1, 4($t2)<---
source line --->    mul $t1, $a1, $a2<---
source line --->    beq $t1, $0, SALVANDO_DATOS<---
source line --->    bne $a2, $t5, NUM_DIFERENTE<---
source line --->        beq $a1, $t4, DEN_MAS_1    # Num igual y Den igual<---
source line --->    NUM_DIFERENTE:<---
source line --->    addi $t2, $t2, 8                         # <-- siguientes dos elementos<---
source line --->    j while<---
source line --->    <---
source line --->    SALVANDO_DATOS:<---
source line --->    addi $t0, $t0, 8        # <-- siguientes dos elementos <---
source line --->    sw $t5, 0($t0)          # <-- Guardando numerador<---
source line --->    sw $t4, 4($t0)          # <-- Guardando denominador<---
source line --->    sw $0, 8($t0)           # <-- Guardando 0/0 para indicar fin del arreglo<---
source line --->    sw $0, 12($t0)          #     esto para poder detener algún loop<---
source line --->                            # Al inicio de la función se apartó espacio<---
source line --->                            # para este elemento, es decir, no se sobre pasará<---
source line --->                            # del valor de $sp original<---
source line --->    <---
source line --->    DEN_MAS_1:<---
source line --->    addi $t7, $t7, 1        # aumentando el valor del denominador  <---
source line --->    bne $t7, $t6, FOR_DENOMINADORES<---
source line --->addi $t8, $t8, 1<---
source line --->bne $t8, $t6, FOR_NUMERADORES<---
source line --->add $t2, $0, $sp<---
source line --->LOOP_PRINT:<---
source line --->lw $t3, 0($t2)<---
source line --->lw $t1, 4($t2)<---
source line --->beq $t3, $0, END_LOOP_PRINT<---
source line --->li $v0, 1 <---
source line --->add $a0, $t3, $0<---
source line --->syscall<---
source line --->li $v0, 11<---
source line --->li $a0, 47<---
source line --->syscall<---
source line --->li $v0, 1 # para depurar<---
source line --->addu $a0, $t1, $0<---
source line --->syscall<---
source line --->li $v0, 11<---
source line --->li $a0, 44<---
source line --->syscall<---
source line --->li $a0, 32<---
source line --->syscall<---
source line --->addi $t2, $t2, 8<---
source line --->j LOOP_PRINT<---
source line --->END_LOOP_PRINT:<---
source line --->add $sp, $sp, $t9        # <-- Devolviendo espacio en pila para numeradores<---
source line --->add $sp, $sp, $t9        # <-- Devolviendo espacio en pila para denominadores<---
source line --->jr $ra<---
source line --->MCD:<---
source line ---># Esta funcoón toma toma dos valores y aplica el algoritmo euclidiano para <---
source line ---># calcular el mcd. <---
source line --->#<---
source line ---># Este algoritmo toma si b = 0, mcd = a <---
source line ---># pero para los demás casos<---
source line ---># repite recursivamente el algoritmo hasta quedar con el valor b=0<---
source line ---># pero cada vez que se repite  a = b, el valor presente de b, pasa al valor<---
source line ---># futuro de a.<---
source line ---># y b = a mod b, a modulo b, en donde el resultado que se entrega es lo mismo<---
source line ---># que el residuo de dividir a/b, por lo que el mcd entre los dos valores<---
source line ---># será el penultimo residuo encontrado antes del residuo cero.  <---
source line ---># <---
source line ---># --- $a1: corresponde al primer valor de entrada<---
source line ---># --- $a2: corresponde al segundo valor de entrada<---
source line ---># --- $v0: corresponde al valor de salida, es decir al mcd.<---
source line --->addi $sp, $sp, -4               # <-- Apartando espacio para $ra<---
source line --->sw $ra, 0($sp)                  # <-- guardando el valor de $ra<---
source line --->                                # ya que se usará recursión<---
source line --->beq $a2, $0, RESULTADO          # <-- si el segundo valor es igual a cero<---
source line --->                                # no se aplicará a = b y b = a mod b<---
source line --->div $a1, $a2                    # <-- se necesita el residuo de a/b <---
source line --->addi $a1, $a2, 0                # <-- se mueve el valor de presente de b<---
source line --->                                # hacia el valor futuro de a<---
source line --->mfhi $a2                        # <--  el residuo de la division anterior<---
source line --->                                # se mueve hacia el valor futuro de b<---
source line --->jal MCD                         # <-- Se usa recursión<---
source line --->RESULTADO:                      # <-- etiqueta para entregar el resultado<---
source line --->add $v0, $a1, 0                 # cuando b = 0<---
source line --->lw $ra, 0($sp)                  # <-- carga de registro $ra guardado<---
source line --->addi $sp, $sp, 4                # <-- devolviendo puntero a su valor original<---
source line --->jr $ra<---
source line ---># Conclusiones:<---
source line ---># Tarea03<---
source line ---># Estudiante: Junior Ruiz Sánchez<---
source line ---># Carné: B97026<---
source line --->#<---
source line --->.data <---
source line --->msj_prueba: .asciiz "El programa está corriendo \n"<---
source line --->.text<---
source line --->main:<---
source line --->li $a1, 5<---
source line --->jal FAREY_SUC<---
source line --->li $v0, 10<---
source line --->syscall<---
source line --->#<---
source line ---># FUNCIONES<---
source line --->#<---
source line --->FAREY_SUC:<---
source line --->addi $sp, $sp, -8        # <-- Apartando espacio en pila para guardar<---
source line --->                         #     dos ceros al final de la lista.<---
source line --->                         # Esto servirá para detener algún escaneo<---
source line --->mul $t9, $a1, $a1        # <-- Creando valor para reservar espacio en pila<---
source line --->sll $t9, $t9, 2          #     que es el cuadrado de n multiplicado por 4<---
source line --->sub $sp, $sp, $t9        # <-- Apartando espacio en pila para numeradores<---
source line --->sub $sp, $sp, $t9        # <-- Apartando espacio en pila para denominadores<---
source line --->add $t0, $0, $sp         # <-- Variable temporal control pila numerador<---
source line --->addi $t8, $0, 1          # <-- Creando variable de aumento para numeradores<---
source line --->addi $t6, $a1, 1         # <-- aumentando valor de parametro<---
source line --->                         #     para ser usado en ciclo for <---
source line --->                         #     y pasando a variable temporal<---
source line --->                         #     ya que se usará otra función que usa a1<---
source line --->addi $t2, $0, 1          # Anticipando valores 1/1 para control<---
source line --->sw $t2, 0($sp)           # de numeros repetidos<---
source line --->sw $t2, 4($sp)           # ya que se debe tener un valor inicial para comparar<---
source line --->sw $0,  8($sp)           # y agregando 0/0 después de 1/1 <---
source line --->sw $0,  12($sp)          # ya que se debe tener un valor final para detener<---
source line --->FOR_NUMERADORES:<---
source line --->addi $t7, $0, 1          # <-- Creando variable de aumento para denominadores<---
source line --->    FOR_DENOMINADORES:<---
source line --->                                       # No agregando valores mayores a 1<---
source line --->    slt $t1, $t7, $t8                  # <-- si dem < num  t1 = 1<---
source line --->    bne $t1, $0, DEN_MAS_1    # <-- siguiente elemento si t1 no es 0<---
source line --->                                    # Simplificando<---
source line --->    add $a2, $0, $t8                # <-- Preparando valores para función MCD<---
source line --->    add $a1, $0, $t7 <---
source line --->    add $t2, $0, $ra                    # <-- Guardando $ra en temporal <---
source line --->    jal MCD                             # <-- Llamado a función<---
source line --->    add $ra, $0, $t2                    # <-- restaurando $ra<---
source line --->    <---
source line --->    div $t8, $v0<---
source line --->    mflo $t5<---
source line --->    div $t7, $v0<---
source line --->    mflo $t4<---
source line --->    <---
source line --->    add $t2, $0, $sp<---
source line --->    while:<---
source line --->    lw $a2, 0($t2)<---
source line --->    lw $a1, 4($t2)<---
source line --->    mul $t1, $a1, $a2<---
source line --->    beq $t1, $0, SALVANDO_DATOS<---
source line --->    bne $a2, $t5, NUM_DIFERENTE<---
source line --->        beq $a1, $t4, DEN_MAS_1    # Num igual y Den igual<---
source line --->    NUM_DIFERENTE:<---
source line --->    addi $t2, $t2, 8                         # <-- siguientes dos elementos<---
source line --->    j while<---
source line --->    <---
source line --->    SALVANDO_DATOS:<---
source line --->    addi $t0, $t0, 8        # <-- siguientes dos elementos <---
source line --->    sw $t5, 0($t0)          # <-- Guardando numerador<---
source line --->    sw $t4, 4($t0)          # <-- Guardando denominador<---
source line --->    sw $0, 8($t0)           # <-- Guardando 0/0 para indicar fin del arreglo<---
source line --->    sw $0, 12($t0)          #     esto para poder detener algún loop<---
source line --->                            # Al inicio de la función se apartó espacio<---
source line --->                            # para este elemento, es decir, no se sobre pasará<---
source line --->                            # del valor de $sp original<---
source line --->    <---
source line --->    DEN_MAS_1:<---
source line --->    addi $t7, $t7, 1        # aumentando el valor del denominador  <---
source line --->    bne $t7, $t6, FOR_DENOMINADORES<---
source line --->addi $t8, $t8, 1<---
source line --->bne $t8, $t6, FOR_NUMERADORES<---
source line --->add $t2, $0, $sp<---
source line --->LOOP_PRINT:<---
source line --->lw $t3, 0($t2)<---
source line --->lw $t1, 4($t2)<---
source line --->beq $t3, $0, END_LOOP_PRINT<---
source line --->li $v0, 1 <---
source line --->add $a0, $t3, $0<---
source line --->syscall<---
source line --->li $v0, 11<---
source line --->li $a0, 47<---
source line --->syscall<---
source line --->li $v0, 1 # para depurar<---
source line --->addu $a0, $t1, $0<---
source line --->syscall<---
source line --->li $v0, 11<---
source line --->li $a0, 44<---
source line --->syscall<---
source line --->li $a0, 32<---
source line --->syscall<---
source line --->addi $t2, $t2, 8<---
source line --->j LOOP_PRINT<---
source line --->END_LOOP_PRINT:<---
source line --->add $sp, $sp, $t9        # <-- Devolviendo espacio en pila para numeradores<---
source line --->add $sp, $sp, $t9        # <-- Devolviendo espacio en pila para denominadores<---
source line --->jr $ra<---
source line --->MCD:<---
source line ---># Esta funcoón toma toma dos valores y aplica el algoritmo euclidiano para <---
source line ---># calcular el mcd. <---
source line --->#<---
source line ---># Este algoritmo toma si b = 0, mcd = a <---
source line ---># pero para los demás casos<---
source line ---># repite recursivamente el algoritmo hasta quedar con el valor b=0<---
source line ---># pero cada vez que se repite  a = b, el valor presente de b, pasa al valor<---
source line ---># futuro de a.<---
source line ---># y b = a mod b, a modulo b, en donde el resultado que se entrega es lo mismo<---
source line ---># que el residuo de dividir a/b, por lo que el mcd entre los dos valores<---
source line ---># será el penultimo residuo encontrado antes del residuo cero.  <---
source line ---># <---
source line ---># --- $a1: corresponde al primer valor de entrada<---
source line ---># --- $a2: corresponde al segundo valor de entrada<---
source line ---># --- $v0: corresponde al valor de salida, es decir al mcd.<---
source line --->addi $sp, $sp, -4               # <-- Apartando espacio para $ra<---
source line --->sw $ra, 0($sp)                  # <-- guardando el valor de $ra<---
source line --->                                # ya que se usará recursión<---
source line --->beq $a2, $0, RESULTADO          # <-- si el segundo valor es igual a cero<---
source line --->                                # no se aplicará a = b y b = a mod b<---
source line --->div $a1, $a2                    # <-- se necesita el residuo de a/b <---
source line --->addi $a1, $a2, 0                # <-- se mueve el valor de presente de b<---
source line --->                                # hacia el valor futuro de a<---
source line --->mfhi $a2                        # <--  el residuo de la division anterior<---
source line --->                                # se mueve hacia el valor futuro de b<---
source line --->jal MCD                         # <-- Se usa recursión<---
source line --->RESULTADO:                      # <-- etiqueta para entregar el resultado<---
source line --->add $v0, $a1, 0                 # cuando b = 0<---
source line --->lw $ra, 0($sp)                  # <-- carga de registro $ra guardado<---
source line --->addi $sp, $sp, 4                # <-- devolviendo puntero a su valor original<---
source line --->jr $ra<---
source line ---># Conclusiones:<---
--------  ASSEMBLY BEGINS  -----------
Assembler first pass begins:
line 5 is directive .data
The symbol msj_prueba with address 268500992 has been added to the /home/pompo/Codigos_EC1/B97026_tarea04_grupo901.s symbol table.
line 7 is directive .asciiz
memory[268500992] set to 69(1 bytes)
memory[268500993] set to 108(1 bytes)
memory[268500994] set to 32(1 bytes)
memory[268500995] set to 112(1 bytes)
memory[268500996] set to 114(1 bytes)
memory[268500997] set to 111(1 bytes)
memory[268500998] set to 103(1 bytes)
memory[268500999] set to 114(1 bytes)
memory[268501000] set to 97(1 bytes)
memory[268501001] set to 109(1 bytes)
memory[268501002] set to 97(1 bytes)
memory[268501003] set to 32(1 bytes)
memory[268501004] set to 101(1 bytes)
memory[268501005] set to 115(1 bytes)
memory[268501006] set to 116(1 bytes)
memory[268501007] set to 225(1 bytes)
memory[268501008] set to 32(1 bytes)
memory[268501009] set to 99(1 bytes)
memory[268501010] set to 111(1 bytes)
memory[268501011] set to 114(1 bytes)
memory[268501012] set to 114(1 bytes)
memory[268501013] set to 105(1 bytes)
memory[268501014] set to 101(1 bytes)
memory[268501015] set to 110(1 bytes)
memory[268501016] set to 100(1 bytes)
memory[268501017] set to 111(1 bytes)
memory[268501018] set to 32(1 bytes)
memory[268501019] set to 10(1 bytes)
memory[268501020] set to 0(1 bytes)
line 10 is directive .text
The symbol main with address 4194304 has been added to the /home/pompo/Codigos_EC1/B97026_tarea04_grupo901.s symbol table.
The symbol FAREY_SUC with address 4194320 has been added to the /home/pompo/Codigos_EC1/B97026_tarea04_grupo901.s symbol table.
The symbol FOR_NUMERADORES with address 4194372 has been added to the /home/pompo/Codigos_EC1/B97026_tarea04_grupo901.s symbol table.
The symbol FOR_DENOMINADORES with address 4194376 has been added to the /home/pompo/Codigos_EC1/B97026_tarea04_grupo901.s symbol table.
The symbol while with address 4194424 has been added to the /home/pompo/Codigos_EC1/B97026_tarea04_grupo901.s symbol table.
The symbol NUM_DIFERENTE with address 4194448 has been added to the /home/pompo/Codigos_EC1/B97026_tarea04_grupo901.s symbol table.
The symbol SALVANDO_DATOS with address 4194456 has been added to the /home/pompo/Codigos_EC1/B97026_tarea04_grupo901.s symbol table.
The symbol DEN_MAS_1 with address 4194476 has been added to the /home/pompo/Codigos_EC1/B97026_tarea04_grupo901.s symbol table.
The symbol LOOP_PRINT with address 4194496 has been added to the /home/pompo/Codigos_EC1/B97026_tarea04_grupo901.s symbol table.
The symbol END_LOOP_PRINT with address 4194572 has been added to the /home/pompo/Codigos_EC1/B97026_tarea04_grupo901.s symbol table.
The symbol MCD with address 4194584 has been added to the /home/pompo/Codigos_EC1/B97026_tarea04_grupo901.s symbol table.
The symbol RESULTADO with address 4194612 has been added to the /home/pompo/Codigos_EC1/B97026_tarea04_grupo901.s symbol table.
Assembler second pass begins
source line --->li $5,5<---
PSEUDO generated: addiu $5, $0, 5
source line --->addiu $5, $0, 5<---
source line --->li $2,10<---
PSEUDO generated: addiu $2, $0, 10
source line --->addiu $2, $0, 10<---
source line --->li $2,1<---
PSEUDO generated: addiu $2, $0, 1
source line --->addiu $2, $0, 1<---
source line --->li $2,11<---
PSEUDO generated: addiu $2, $0, 11
source line --->addiu $2, $0, 11<---
source line --->li $4,47<---
PSEUDO generated: addiu $4, $0, 47
source line --->addiu $4, $0, 47<---
source line --->li $2,1<---
PSEUDO generated: addiu $2, $0, 1
source line --->addiu $2, $0, 1<---
source line --->li $2,11<---
PSEUDO generated: addiu $2, $0, 11
source line --->addiu $2, $0, 11<---
source line --->li $4,44<---
PSEUDO generated: addiu $4, $0, 44
source line --->addiu $4, $0, 44<---
source line --->li $4,32<---
PSEUDO generated: addiu $4, $0, 32
source line --->addiu $4, $0, 32<---
source line --->add $2,$5,0<---
PSEUDO generated: addi $2, $5, 0
source line --->addi $2, $5, 0<---
Code generation begins
[4194304]       addiu   $5,$0,5         ;  5 0 5 [0x24050005]  001001|00000|00101|00000|00000|000101
memory[4194304] set to 604307461
[4194308]       jal     4194320         ;  100004 [0x0c100004]  000011|00000|10000|00000|00000|000100
memory[4194308] set to 202375172
[4194312]       addiu   $2,$0,10        ;  2 0 a [0x2402000a]  001001|00000|00010|00000|00000|001010
memory[4194312] set to 604110858
[4194316]       syscall                 ;  [0x0000000c]  000000|00000|00000|00000|00000|001100
memory[4194316] set to 12
[4194320]       addi    $29,$29,-8      ;  1d 1d -8 [0x23bdfff8]  001000|11101|11101|11111|11111|111000
memory[4194320] set to 599654392
[4194324]       mul     $25,$5,$5       ;  19 5 5 [0x70a5c802]  011100|00101|00101|11001|00000|000010
memory[4194324] set to 1889912834
[4194328]       sll     $25,$25,2       ;  19 19 2 [0x0019c880]  000000|00000|11001|11001|00010|000000
memory[4194328] set to 1689728
[4194332]       sub     $29,$29,$25     ;  1d 1d 19 [0x03b9e822]  000000|11101|11001|11101|00000|100010
memory[4194332] set to 62515234
[4194336]       sub     $29,$29,$25     ;  1d 1d 19 [0x03b9e822]  000000|11101|11001|11101|00000|100010
memory[4194336] set to 62515234
[4194340]       add     $8,$0,$29       ;  8 0 1d [0x001d4020]  000000|00000|11101|01000|00000|100000
memory[4194340] set to 1916960
[4194344]       addi    $24,$0,1        ;  18 0 1 [0x20180001]  001000|00000|11000|00000|00000|000001
memory[4194344] set to 538443777
[4194348]       addi    $14,$5,1        ;  e 5 1 [0x20ae0001]  001000|00101|01110|00000|00000|000001
memory[4194348] set to 548274177
[4194352]       addi    $10,$0,1        ;  a 0 1 [0x200a0001]  001000|00000|01010|00000|00000|000001
memory[4194352] set to 537526273
[4194356]       sw      $10,0($29)      ;  a 0 1d [0xafaa0000]  101011|11101|01010|00000|00000|000000
memory[4194356] set to -1347813376
[4194360]       sw      $10,4($29)      ;  a 4 1d [0xafaa0004]  101011|11101|01010|00000|00000|000100
memory[4194360] set to -1347813372
[4194364]       sw      $0,8($29)       ;  0 8 1d [0xafa00008]  101011|11101|00000|00000|00000|001000
memory[4194364] set to -1348468728
[4194368]       sw      $0,12($29)      ;  0 c 1d [0xafa0000c]  101011|11101|00000|00000|00000|001100
memory[4194368] set to -1348468724
[4194372]       addi    $15,$0,1        ;  f 0 1 [0x200f0001]  001000|00000|01111|00000|00000|000001
memory[4194372] set to 537853953
[4194376]       slt     $9,$15,$24      ;  9 f 18 [0x01f8482a]  000000|01111|11000|01001|00000|101010
memory[4194376] set to 33048618
[4194380]       bne     $9,$0,23        ;  9 0 17 [0x15200017]  000101|01001|00000|00000|00000|010111
memory[4194380] set to 354418711
[4194384]       add     $6,$0,$24       ;  6 0 18 [0x00183020]  000000|00000|11000|00110|00000|100000
memory[4194384] set to 1585184
[4194388]       add     $5,$0,$15       ;  5 0 f [0x000f2820]  000000|00000|01111|00101|00000|100000
memory[4194388] set to 993312
[4194392]       add     $10,$0,$31      ;  a 0 1f [0x001f5020]  000000|00000|11111|01010|00000|100000
memory[4194392] set to 2052128
[4194396]       jal     4194584         ;  100046 [0x0c100046]  000011|00000|10000|00000|00001|000110
memory[4194396] set to 202375238
[4194400]       add     $31,$0,$10      ;  1f 0 a [0x000af820]  000000|00000|01010|11111|00000|100000
memory[4194400] set to 718880
[4194404]       div     $24,$2          ;  18 2 [0x0302001a]  000000|11000|00010|00000|00000|011010
memory[4194404] set to 50462746
[4194408]       mflo    $13             ;  d [0x00006812]  000000|00000|00000|01101|00000|010010
memory[4194408] set to 26642
[4194412]       div     $15,$2          ;  f 2 [0x01e2001a]  000000|01111|00010|00000|00000|011010
memory[4194412] set to 31588378
[4194416]       mflo    $12             ;  c [0x00006012]  000000|00000|00000|01100|00000|010010
memory[4194416] set to 24594
[4194420]       add     $10,$0,$29      ;  a 0 1d [0x001d5020]  000000|00000|11101|01010|00000|100000
memory[4194420] set to 1921056
[4194424]       lw      $6,0($10)       ;  6 0 a [0x8d460000]  100011|01010|00110|00000|00000|000000
memory[4194424] set to -1924792320
[4194428]       lw      $5,4($10)       ;  5 4 a [0x8d450004]  100011|01010|00101|00000|00000|000100
memory[4194428] set to -1924857852
[4194432]       mul     $9,$5,$6        ;  9 5 6 [0x70a64802]  011100|00101|00110|01001|00000|000010
memory[4194432] set to 1889945602
[4194436]       beq     $9,$0,4         ;  9 0 4 [0x11200004]  000100|01001|00000|00000|00000|000100
memory[4194436] set to 287309828
[4194440]       bne     $6,$13,1        ;  6 d 1 [0x14cd0001]  000101|00110|01101|00000|00000|000001
memory[4194440] set to 348979201
[4194444]       beq     $5,$12,7        ;  5 c 7 [0x10ac0007]  000100|00101|01100|00000|00000|000111
memory[4194444] set to 279707655
[4194448]       addi    $10,$10,8       ;  a a 8 [0x214a0008]  001000|01010|01010|00000|00000|001000
memory[4194448] set to 558497800
[4194452]       j       4194424         ;  10001e [0x0810001e]  000010|00000|10000|00000|00000|011110
memory[4194452] set to 135266334
[4194456]       addi    $8,$8,8         ;  8 8 8 [0x21080008]  001000|01000|01000|00000|00000|001000
memory[4194456] set to 554172424
[4194460]       sw      $13,0($8)       ;  d 0 8 [0xad0d0000]  101011|01000|01101|00000|00000|000000
memory[4194460] set to -1391656960
[4194464]       sw      $12,4($8)       ;  c 4 8 [0xad0c0004]  101011|01000|01100|00000|00000|000100
memory[4194464] set to -1391722492
[4194468]       sw      $0,8($8)        ;  0 8 8 [0xad000008]  101011|01000|00000|00000|00000|001000
memory[4194468] set to -1392508920
[4194472]       sw      $0,12($8)       ;  0 c 8 [0xad00000c]  101011|01000|00000|00000|00000|001100
memory[4194472] set to -1392508916
[4194476]       addi    $15,$15,1       ;  f f 1 [0x21ef0001]  001000|01111|01111|00000|00000|000001
memory[4194476] set to 569311233
[4194480]       bne     $15,$14,-27     ;  f e -1b [0x15eeffe5]  000101|01111|01110|11111|11111|100101
memory[4194480] set to 367984613
[4194484]       addi    $24,$24,1       ;  18 18 1 [0x23180001]  001000|11000|11000|00000|00000|000001
memory[4194484] set to 588775425
[4194488]       bne     $24,$14,-30     ;  18 e -1e [0x170effe2]  000101|11000|01110|11111|11111|100010
memory[4194488] set to 386858978
[4194492]       add     $10,$0,$29      ;  a 0 1d [0x001d5020]  000000|00000|11101|01010|00000|100000
memory[4194492] set to 1921056
[4194496]       lw      $11,0($10)      ;  b 0 a [0x8d4b0000]  100011|01010|01011|00000|00000|000000
memory[4194496] set to -1924464640
[4194500]       lw      $9,4($10)       ;  9 4 a [0x8d490004]  100011|01010|01001|00000|00000|000100
memory[4194500] set to -1924595708
[4194504]       beq     $11,$0,16       ;  b 0 10 [0x11600010]  000100|01011|00000|00000|00000|010000
memory[4194504] set to 291504144
[4194508]       addiu   $2,$0,1         ;  2 0 1 [0x24020001]  001001|00000|00010|00000|00000|000001
memory[4194508] set to 604110849
[4194512]       add     $4,$11,$0       ;  4 b 0 [0x01602020]  000000|01011|00000|00100|00000|100000
memory[4194512] set to 23076896
[4194516]       syscall                 ;  [0x0000000c]  000000|00000|00000|00000|00000|001100
memory[4194516] set to 12
[4194520]       addiu   $2,$0,11        ;  2 0 b [0x2402000b]  001001|00000|00010|00000|00000|001011
memory[4194520] set to 604110859
[4194524]       addiu   $4,$0,47        ;  4 0 2f [0x2404002f]  001001|00000|00100|00000|00000|101111
memory[4194524] set to 604241967
[4194528]       syscall                 ;  [0x0000000c]  000000|00000|00000|00000|00000|001100
memory[4194528] set to 12
[4194532]       addiu   $2,$0,1         ;  2 0 1 [0x24020001]  001001|00000|00010|00000|00000|000001
memory[4194532] set to 604110849
[4194536]       addu    $4,$9,$0        ;  4 9 0 [0x01202021]  000000|01001|00000|00100|00000|100001
memory[4194536] set to 18882593
[4194540]       syscall                 ;  [0x0000000c]  000000|00000|00000|00000|00000|001100
memory[4194540] set to 12
[4194544]       addiu   $2,$0,11        ;  2 0 b [0x2402000b]  001001|00000|00010|00000|00000|001011
memory[4194544] set to 604110859
[4194548]       addiu   $4,$0,44        ;  4 0 2c [0x2404002c]  001001|00000|00100|00000|00000|101100
memory[4194548] set to 604241964
[4194552]       syscall                 ;  [0x0000000c]  000000|00000|00000|00000|00000|001100
memory[4194552] set to 12
[4194556]       addiu   $4,$0,32        ;  4 0 20 [0x24040020]  001001|00000|00100|00000|00000|100000
memory[4194556] set to 604241952
[4194560]       syscall                 ;  [0x0000000c]  000000|00000|00000|00000|00000|001100
memory[4194560] set to 12
[4194564]       addi    $10,$10,8       ;  a a 8 [0x214a0008]  001000|01010|01010|00000|00000|001000
memory[4194564] set to 558497800
[4194568]       j       4194496         ;  100030 [0x08100030]  000010|00000|10000|00000|00000|110000
memory[4194568] set to 135266352
[4194572]       add     $29,$29,$25     ;  1d 1d 19 [0x03b9e820]  000000|11101|11001|11101|00000|100000
memory[4194572] set to 62515232
[4194576]       add     $29,$29,$25     ;  1d 1d 19 [0x03b9e820]  000000|11101|11001|11101|00000|100000
memory[4194576] set to 62515232
[4194580]       jr      $31             ;  1f [0x03e00008]  000000|11111|00000|00000|00000|001000
memory[4194580] set to 65011720
[4194584]       addi    $29,$29,-4      ;  1d 1d -4 [0x23bdfffc]  001000|11101|11101|11111|11111|111100
memory[4194584] set to 599654396
[4194588]       sw      $31,0($29)      ;  1f 0 1d [0xafbf0000]  101011|11101|11111|00000|00000|000000
memory[4194588] set to -1346437120
[4194592]       beq     $6,$0,4         ;  6 0 4 [0x10c00004]  000100|00110|00000|00000|00000|000100
memory[4194592] set to 281018372
[4194596]       div     $5,$6           ;  5 6 [0x00a6001a]  000000|00101|00110|00000|00000|011010
memory[4194596] set to 10879002
[4194600]       addi    $5,$6,0         ;  5 6 0 [0x20c50000]  001000|00110|00101|00000|00000|000000
memory[4194600] set to 549781504
[4194604]       mfhi    $6              ;  6 [0x00003010]  000000|00000|00000|00110|00000|010000
memory[4194604] set to 12304
[4194608]       jal     4194584         ;  100046 [0x0c100046]  000011|00000|10000|00000|00001|000110
memory[4194608] set to 202375238
[4194612]       addi    $2,$5,0         ;  2 5 0 [0x20a20000]  001000|00101|00010|00000|00000|000000
memory[4194612] set to 547487744
[4194616]       lw      $31,0($29)      ;  1f 0 1d [0x8fbf0000]  100011|11101|11111|00000|00000|000000
memory[4194616] set to -1883308032
[4194620]       addi    $29,$29,4       ;  1d 1d 4 [0x23bd0004]  001000|11101|11101|00000|00000|000100
memory[4194620] set to 599588868
[4194624]       jr      $31             ;  1f [0x03e00008]  000000|11111|00000|00000|00000|001000
memory[4194624] set to 65011720
--------  SIMULATION BEGINS  -----------
memory[2147479340] set to 1(4 bytes)
memory[2147479344] set to 1(4 bytes)
memory[2147479348] set to 0(4 bytes)
memory[2147479352] set to 0(4 bytes)
memory[2147479336] set to 4194400(4 bytes)
memory[2147479332] set to 4194612(4 bytes)
memory[2147479336] set to 4194400(4 bytes)
memory[2147479332] set to 4194612(4 bytes)
memory[2147479348] set to 1(4 bytes)
memory[2147479352] set to 2(4 bytes)
memory[2147479356] set to 0(4 bytes)
memory[2147479360] set to 0(4 bytes)
memory[2147479336] set to 4194400(4 bytes)
memory[2147479332] set to 4194612(4 bytes)
memory[2147479356] set to 1(4 bytes)
memory[2147479360] set to 3(4 bytes)
memory[2147479364] set to 0(4 bytes)
memory[2147479368] set to 0(4 bytes)
memory[2147479336] set to 4194400(4 bytes)
memory[2147479332] set to 4194612(4 bytes)
memory[2147479364] set to 1(4 bytes)
memory[2147479368] set to 4(4 bytes)
memory[2147479372] set to 0(4 bytes)
memory[2147479376] set to 0(4 bytes)
memory[2147479336] set to 4194400(4 bytes)
memory[2147479332] set to 4194612(4 bytes)
memory[2147479372] set to 1(4 bytes)
memory[2147479376] set to 5(4 bytes)
memory[2147479380] set to 0(4 bytes)
memory[2147479384] set to 0(4 bytes)
memory[2147479336] set to 4194400(4 bytes)
memory[2147479332] set to 4194612(4 bytes)
memory[2147479336] set to 4194400(4 bytes)
memory[2147479332] set to 4194612(4 bytes)
memory[2147479328] set to 4194612(4 bytes)
memory[2147479380] set to 2(4 bytes)
memory[2147479384] set to 3(4 bytes)
memory[2147479388] set to 0(4 bytes)
memory[2147479392] set to 0(4 bytes)
memory[2147479336] set to 4194400(4 bytes)
memory[2147479332] set to 4194612(4 bytes)
memory[2147479336] set to 4194400(4 bytes)
memory[2147479332] set to 4194612(4 bytes)
memory[2147479328] set to 4194612(4 bytes)
memory[2147479388] set to 2(4 bytes)
memory[2147479392] set to 5(4 bytes)
memory[2147479396] set to 0(4 bytes)
memory[2147479400] set to 0(4 bytes)
memory[2147479336] set to 4194400(4 bytes)
memory[2147479332] set to 4194612(4 bytes)
memory[2147479336] set to 4194400(4 bytes)
memory[2147479332] set to 4194612(4 bytes)
memory[2147479328] set to 4194612(4 bytes)
memory[2147479396] set to 3(4 bytes)
memory[2147479400] set to 4(4 bytes)
memory[2147479404] set to 0(4 bytes)
memory[2147479408] set to 0(4 bytes)
memory[2147479336] set to 4194400(4 bytes)
memory[2147479332] set to 4194612(4 bytes)
memory[2147479328] set to 4194612(4 bytes)
memory[2147479324] set to 4194612(4 bytes)
memory[2147479404] set to 3(4 bytes)
memory[2147479408] set to 5(4 bytes)
memory[2147479412] set to 0(4 bytes)
memory[2147479416] set to 0(4 bytes)
memory[2147479336] set to 4194400(4 bytes)
memory[2147479332] set to 4194612(4 bytes)
memory[2147479336] set to 4194400(4 bytes)
memory[2147479332] set to 4194612(4 bytes)
memory[2147479328] set to 4194612(4 bytes)
memory[2147479412] set to 4(4 bytes)
memory[2147479416] set to 5(4 bytes)
memory[2147479420] set to 0(4 bytes)
memory[2147479424] set to 0(4 bytes)
memory[2147479336] set to 4194400(4 bytes)
memory[2147479332] set to 4194612(4 bytes)
1/1, 1/2, 1/3, 1/4, 1/5, 2/3, 2/5, 3/4, 3/5, 4/5, 
--------  ALL PROCESSING COMPLETE  -----------

